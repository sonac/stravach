// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	models "stravach/app/storage/models"

	mock "github.com/stretchr/testify/mock"
)

// DBStore is an autogenerated mock type for the DBStore type
type DBStore struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *DBStore) CreateUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserActivities provides a mock function with given fields: activities
func (_m *DBStore) CreateUserActivities(activities []*models.UserActivity) error {
	ret := _m.Called(activities)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*models.UserActivity) error); ok {
		r0 = rf(activities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActivityById provides a mock function with given fields: activityID
func (_m *DBStore) GetActivityById(activityID int64) (*models.UserActivity, error) {
	ret := _m.Called(activityID)

	var r0 *models.UserActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.UserActivity, error)); ok {
		return rf(activityID)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.UserActivity); ok {
		r0 = rf(activityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(activityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByChatId provides a mock function with given fields: chatID
func (_m *DBStore) GetUserByChatId(chatID int64) (*models.User, error) {
	ret := _m.Called(chatID)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.User, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserExistsByChatId provides a mock function with given fields: chatID
func (_m *DBStore) IsUserExistsByChatId(chatID int64) (bool, error) {
	ret := _m.Called(chatID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *DBStore) UpdateUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserActivity provides a mock function with given fields: activity
func (_m *DBStore) UpdateUserActivity(activity *models.UserActivity) error {
	ret := _m.Called(activity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserActivity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDBStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBStore creates a new instance of DBStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBStore(t mockConstructorTestingTNewDBStore) *DBStore {
	mock := &DBStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
