// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	models "stravach/app/storage/models"

	mock "github.com/stretchr/testify/mock"

	strava "stravach/app/strava"
)

// StravaService is an autogenerated mock type for the StravaService type
type StravaService struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: accessCode
func (_m *StravaService) Authorize(accessCode string) (*strava.AuthResp, error) {
	ret := _m.Called(accessCode)

	var r0 *strava.AuthResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*strava.AuthResp, error)); ok {
		return rf(accessCode)
	}
	if rf, ok := ret.Get(0).(func(string) *strava.AuthResp); ok {
		r0 = rf(accessCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*strava.AuthResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivity provides a mock function with given fields: accessToken, activityId
func (_m *StravaService) GetActivity(accessToken string, activityId int64) (*models.UserActivity, error) {
	ret := _m.Called(accessToken, activityId)

	var r0 *models.UserActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64) (*models.UserActivity, error)); ok {
		return rf(accessToken, activityId)
	}
	if rf, ok := ret.Get(0).(func(string, int64) *models.UserActivity); ok {
		r0 = rf(accessToken, activityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(accessToken, activityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllActivities provides a mock function with given fields: accessToken
func (_m *StravaService) GetAllActivities(accessToken string) (*[]models.UserActivity, error) {
	ret := _m.Called(accessToken)

	var r0 *[]models.UserActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]models.UserActivity, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) *[]models.UserActivity); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.UserActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestActivities provides a mock function with given fields: accessToken, limit
func (_m *StravaService) GetLatestActivities(accessToken string, limit int) ([]models.UserActivity, error) {
	ret := _m.Called(accessToken, limit)

	var r0 []models.UserActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]models.UserActivity, error)); ok {
		return rf(accessToken, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int) []models.UserActivity); ok {
		r0 = rf(accessToken, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(accessToken, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshAccessToken provides a mock function with given fields: refreshToken
func (_m *StravaService) RefreshAccessToken(refreshToken string) (*strava.AuthResp, error) {
	ret := _m.Called(refreshToken)

	var r0 *strava.AuthResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*strava.AuthResp, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *strava.AuthResp); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*strava.AuthResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActivity provides a mock function with given fields: accessToken, activity
func (_m *StravaService) UpdateActivity(accessToken string, activity models.UserActivity) (*models.UserActivity, error) {
	ret := _m.Called(accessToken, activity)

	var r0 *models.UserActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.UserActivity) (*models.UserActivity, error)); ok {
		return rf(accessToken, activity)
	}
	if rf, ok := ret.Get(0).(func(string, models.UserActivity) *models.UserActivity); ok {
		r0 = rf(accessToken, activity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, models.UserActivity) error); ok {
		r1 = rf(accessToken, activity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStravaService interface {
	mock.TestingT
	Cleanup(func())
}

// NewStravaService creates a new instance of StravaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStravaService(t mockConstructorTestingTNewStravaService) *StravaService {
	mock := &StravaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
