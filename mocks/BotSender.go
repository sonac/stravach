// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	bot "github.com/go-telegram/bot"

	mock "github.com/stretchr/testify/mock"

	models "github.com/go-telegram/bot/models"
)

// BotSender is an autogenerated mock type for the BotSender type
type BotSender struct {
	mock.Mock
}

// RegisterHandler provides a mock function with given fields: handlerType, command, matchType, handlerFunc, middleware
func (_m *BotSender) RegisterHandler(handlerType bot.HandlerType, command string, matchType bot.MatchType, handlerFunc bot.HandlerFunc, middleware ...bot.Middleware) string {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handlerType, command, matchType, handlerFunc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(bot.HandlerType, string, bot.MatchType, bot.HandlerFunc, ...bot.Middleware) string); ok {
		r0 = rf(handlerType, command, matchType, handlerFunc, middleware...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RegisterHandlerMatchFunc provides a mock function with given fields: matchFunc, handlerFunc, middleware
func (_m *BotSender) RegisterHandlerMatchFunc(matchFunc bot.MatchFunc, handlerFunc bot.HandlerFunc, middleware ...bot.Middleware) string {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, matchFunc, handlerFunc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(bot.MatchFunc, bot.HandlerFunc, ...bot.Middleware) string); ok {
		r0 = rf(matchFunc, handlerFunc, middleware...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendMessage provides a mock function with given fields: ctx, params
func (_m *BotSender) SendMessage(ctx context.Context, params *bot.SendMessageParams) (*models.Message, error) {
	ret := _m.Called(ctx, params)

	var r0 *models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bot.SendMessageParams) (*models.Message, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bot.SendMessageParams) *models.Message); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bot.SendMessageParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: ctx
func (_m *BotSender) Start(ctx context.Context) {
	_m.Called(ctx)
}

type mockConstructorTestingTNewBotSender interface {
	mock.TestingT
	Cleanup(func())
}

// NewBotSender creates a new instance of BotSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBotSender(t mockConstructorTestingTNewBotSender) *BotSender {
	mock := &BotSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
