// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	models "stravach/app/storage/models"

	mock "github.com/stretchr/testify/mock"
)

// AI is an autogenerated mock type for the AI type
type AI struct {
	mock.Mock
}

// CheckIfItsAName provides a mock function with given fields: msg
func (_m *AI) CheckIfItsAName(msg string) (bool, error) {
	ret := _m.Called(msg)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormatActivityName provides a mock function with given fields: name
func (_m *AI) FormatActivityName(name string) (string, error) {
	ret := _m.Called(name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateBetterNames provides a mock function with given fields: activity, lang
func (_m *AI) GenerateBetterNames(activity models.UserActivity, lang string) ([]string, error) {
	ret := _m.Called(activity, lang)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserActivity, string) ([]string, error)); ok {
		return rf(activity, lang)
	}
	if rf, ok := ret.Get(0).(func(models.UserActivity, string) []string); ok {
		r0 = rf(activity, lang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(models.UserActivity, string) error); ok {
		r1 = rf(activity, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateBetterNamesWithCustomizedPrompt provides a mock function with given fields: activity, lang, prompt
func (_m *AI) GenerateBetterNamesWithCustomizedPrompt(activity models.UserActivity, lang string, prompt string) ([]string, error) {
	ret := _m.Called(activity, lang, prompt)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserActivity, string, string) ([]string, error)); ok {
		return rf(activity, lang, prompt)
	}
	if rf, ok := ret.Get(0).(func(models.UserActivity, string, string) []string); ok {
		r0 = rf(activity, lang, prompt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(models.UserActivity, string, string) error); ok {
		r1 = rf(activity, lang, prompt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAI creates a new instance of AI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAI(t mockConstructorTestingTNewAI) *AI {
	mock := &AI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
