// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	models "stravach/app/storage/models"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *Store) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserActivity provides a mock function with given fields: activity, userId
func (_m *Store) CreateUserActivity(activity *models.UserActivity, userId int64) error {
	ret := _m.Called(activity, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserActivity, int64) error); ok {
		r0 = rf(activity, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActivityById provides a mock function with given fields: activityId
func (_m *Store) GetActivityById(activityId int64) (*models.UserActivity, error) {
	ret := _m.Called(activityId)

	var r0 *models.UserActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.UserActivity, error)); ok {
		return rf(activityId)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.UserActivity); ok {
		r0 = rf(activityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(activityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserActivities provides a mock function with given fields: userId, limit
func (_m *Store) GetUserActivities(userId int64, limit int) ([]models.UserActivity, error) {
	ret := _m.Called(userId, limit)

	var r0 []models.UserActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) ([]models.UserActivity, error)); ok {
		return rf(userId, limit)
	}
	if rf, ok := ret.Get(0).(func(int64, int) []models.UserActivity); ok {
		r0 = rf(userId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(userId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByChatId provides a mock function with given fields: chatId
func (_m *Store) GetUserByChatId(chatId int64) (*models.User, error) {
	ret := _m.Called(chatId)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.User, error)); ok {
		return rf(chatId)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: id
func (_m *Store) GetUserById(id int64) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByStravaId provides a mock function with given fields: stravaId
func (_m *Store) GetUserByStravaId(stravaId int64) (*models.User, error) {
	ret := _m.Called(stravaId)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.User, error)); ok {
		return rf(stravaId)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(stravaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(stravaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsActivityExists provides a mock function with given fields: activityId
func (_m *Store) IsActivityExists(activityId int64) (bool, error) {
	ret := _m.Called(activityId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(activityId)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(activityId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(activityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *Store) UpdateUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
